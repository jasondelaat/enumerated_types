* Enumerated Types for Javascript
  Full featured, extensible enumerations for javascript.  
** Getting Started
*** Installing
**** Node
     #+begin_src sh
npm install @jasondelaat/enumeration
     #+end_src

**** Browser
     Download the package from [[https://github.com/jasondelaat/enumeration/releases][here]]. 

     The ~js~ folder contains two files: ~enumeration.js~ and
     ~enumeration_module.js~.

     To use ~enumeration.js~ load it from an HTML script tag:

     #+begin_src html
<script type='text/javascript' src='/js/enumeration.js'></script>
     #+end_src
     
     To use ~enumeration_module.js~ import the required
     objects/functions:

     #+begin_src javascript
import * as enumeration from '/js/enumeration_module.js'
import {Enum} from '/js/enumeration_module.js'
     #+end_src
     
** Usage
   The ~enumeration~ package provides a base object,
   ~EnumerationBase~, on which to base enumerated types.
   
   The following methods are available on all enumerated types:
   
   | Method                    | Description                                                       | Default Implementation |
   |---------------------------+-------------------------------------------------------------------+------------------------|
   | first()                   | Returns the first value in the enumeration                        | no                     |
   | fromInt(i)                | Returns an enumeration given an integer                           | no                     |
   | isEqualTo(other)          | Tests two enumerations for equality                               | yes                    |
   | isGreater(other)          | Test if one enumeration is greater than another                   | yes                    |
   | isGreaterOrEqualTo(other) | Test if one enumeration is greater than or equal to another       | yes                    |
   | isLess(other)             | Test if one enumeration is less than another                      | yes                    |
   | isLessOrEqualTo(other)    | Test if one enumeration is less than or equal to another          | yes                    |
   | iterator(from, to)        | Gives an iterator between the (optional) given enumeration values | yes                    |
   | last()                    | Returns the last value of the enumeration                         | no                     |
   | methods(methods_object)   | Adds additional methods to the enumerated type                    | yes                    |
   | next()                    | Returns the next enumeration value in the sequence                | yes                    |
   | previous()                | Returns the previous enumeration value in the sequence            | yes                    |
   | toInt()                   | Converts an enumeration value to its integer representation       | no                     |
   | toString()                | Converts an enumeration value to a string representation          | no                     |
    
   When creating your own enumerated types, the methods marks "no"
   under 'Default Implementation' /must/ be implemented. All other
   methods /may/ be overridden if required.

*** Enumerated constants with ~Enum~
    Use the ~Enum~ function to create a set of constants:

    #+begin_src javascript
Color = Enum(
    'RED',
    'ORANGE',
    'YELLOW',
    'GREEN',
    'BLUE',
    'INDIGO',
    'VIOLET'
)
    #+end_src
    
    Constants can be converted to and from their interger equivalents:

    #+begin_src javascript
Color.fromInt(3)    // Color.GREEN
Color.GREEN.toInt() // 3
    #+end_src
    
    And you can also get the string representation:

    #+begin_src javascript
Color.RED.toString()    // 'RED'
Color.VIOLET.toString() // 'VIOLET'
    #+end_src
    
    This allows you to use the constants as if they were object
    keys.

    #+begin_src javascript
someObj = {
    Color.RED : 'Something having to do with red.',
    Color.BLUE : 'Something to do with blue.',
}
    #+end_src
    
    In the above example the actual keys are the strings ~RED~ and
    ~BLUE~ because javascript calls ~toString()~ automatically when
    an object is used as a key.
    
    You can navigate forwards and backwards through the sequence using
    ~next()~ and ~previous()~. Going past the end of the sequence
    throws and error:

    #+begin_src javascript
Color.RED.next()        // Color.ORANGE
Color.INDIGO.previous() // Color.BLUE
Color.RED.previous()    // Error!
Color.VIOLET.next()     // Error!
    #+end_src
    
    To get around that you can get an ~iterator()~ and loop through
    the values with a ~for~ loop or with ~forEach~.

    #+begin_src javascript
// Prints all the colors to the console.
for (let color of Color.iterator()) {
    ; console.log(color.toString()) 
}

// Also prints all the colors to the console.
Color.iterator().forEach(color => console.log(color.toString()))
    #+end_src

    The ~iterator()~ method takes two parameters ~from~ and ~to~, both
    optional, so you can iterate though a subset of the values.

    #+begin_src javascript
Color.iterator(Color.GREEN, Color.INDIGO)
    .forEach(color => console.log(color.toString()))
    #+end_src
    
    And can even be used to iterate though the values in reverse order
    if desired.

    #+begin_src javascript
Color.iterator(Color.last(), Color.first())
    .forEach(color => console.log(color.toString()))
    #+end_src
    
    The constants can be compared in a number of ways.

    #+begin_src javascript
Color.RED.isLess(Color.BLUE)                // true
Color.VIOLET.isLess(Color.BLUE)             // false
Color.VIOLET.isGreater(Color.BLUE)          // true
Color.VIOLET.isGreater(Color.VIOLET)        // false
Color.VIOLET.isGreaterOrEqual(Color.VIOLET) // true
Color.RED.isEqual(Color.GREEN)              // false
Color.RED.isEqual(Color.RED)                // true
Color.RED === Color.GREEN                   // false
Color.RED === Color.RED                     // true
    #+end_src
    
    Finally, the type can be extended with addtional methods:

    #+begin_src javascript
Answers = Enum('YES', 'NO', 'MAYBE').methods({
    toLowerCase() {
	return this.toString().toLowerCase();
    },
    capitalize() {
	const as_string = this.toString();
	const first = as_string[0];
	const rest = as_string.substring(1).toLowerCase();
	return `${first}${rest}`;
    }
})

console.log(Answers.YES.toLowerCase());  // yes
console.log(Answers.Maybe.capitalize()); // Maybe
    #+end_src
    
    You can call ~methods~ /at most/ once. After that the prototype
    object is frozen and can't be modified further.

*** Constrained values with ~EnumeratedRange~
    Another type of enumeration are values constrained to a particular
    range: values between 1 and 10, for instance. In this case it's
    actually the number we're interested in not a symbolic name and
    there are, generally, too many possible values to create them as
    contants. Instead we can create an ~EnumeratedRange~.

    #+begin_src javascript
SmallNum = EnumeratedRange(1, 10, 'SmallNum')
    #+end_src

    The resulting value, ~SmallNum~ in this example, can then be used
    to construct values in this range.  The third parameter is
    optional and is only relevant when calling ~toString()~. Trying to
    create a value outside of the allowed range throws an error.

    #+begin_src javascript
x = SmallNum(1)
y = SmallNum(5)
z = SmallNum(10)
error1 = SmallNum(0)  // Error!
error2 = SmallNum(11) // Error!
    #+end_src
